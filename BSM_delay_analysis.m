
%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm_10node.output2.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/05/01 12:59:04
clear all;
close all;
%% Initialize variables.
filename = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_20node_5sec.output3.csv_msgStats2.csv';
delimiter = ',';
startRow = 2;
filename_40 = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_40node_5sec.output3.csv_msgStats2.csv';
filename_80 = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_80node_5sec.output3.csv_msgStats2.csv';
filename_160 = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_160node_5sec.output3.csv_msgStats2.csv';

filename_20n_delay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_20node_5sec.output3.csv';
filename_40n_delay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_40node_5sec.output3.csv';
filename_80n_delay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_80node_5sec.output3.csv';
filename_160n_delay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_160node_5sec.output3.csv';

%filename_20n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm__control_20node.output3.csv';
%filename_40n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm__control_40node.output3.csv';
%filename_80n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm__control_80node.output3.csv';
%filename_160n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm__control_160node.output3.csv';
filename_20n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm__control_20node.output3.csv';
filename_40n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm__control_40node.output3.csv';
filename_80n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm__control_80node.output3.csv';
filename_160n_cdelay = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm__control_160node.output3.csv';

delimiter = ',';
startRow = 2;
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
% For more information, see the TEXTSCAN documentation.
%formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec = '%f%f%f%f%f%f%f%[^\n\r]';
formatSpec_20n_delay = '%f%f%f%f%f%[^\n\r]';
formatSpec_40n_delay = '%f%f%f%f%f%[^\n\r]';
formatSpec_80n_delay = '%f%f%f%f%f%[^\n\r]';
formatSpec_160n_delay = '%f%f%f%f%f%[^\n\r]';
formatSpec_20n_cdelay = '%f%f%f%f%f%[^\n\r]';
formatSpec_40n_cdelay = '%f%f%f%f%f%[^\n\r]';
formatSpec_80n_cdelay = '%f%f%f%f%f%[^\n\r]';
formatSpec_160n_cdelay = '%f%f%f%f%f%[^\n\r]';
%formatSpec_40n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
%formatSpec_80n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
%formatSpec_160n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';

%% Open the text file.fileID_delay = fopen(filename_20n_delay,'r');
fileID_delay = fopen(filename_20n_delay,'r');
fileID_40n_delay = fopen(filename_40n_delay,'r');
fileID_80n_delay = fopen(filename_80n_delay,'r');
fileID_160n_delay = fopen(filename_160n_delay,'r');
fileID_cdelay = fopen(filename_20n_cdelay,'r');
fileID_40n_cdelay = fopen(filename_40n_cdelay,'r');
fileID_80n_cdelay = fopen(filename_80n_cdelay,'r');
fileID_160n_cdelay = fopen(filename_160n_cdelay,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray_delay = textscan(fileID_delay, formatSpec_20n_delay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_40n_delay = textscan(fileID_40n_delay, formatSpec_40n_delay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_80n_delay = textscan(fileID_80n_delay, formatSpec_80n_delay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_160n_delay = textscan(fileID_160n_delay, formatSpec_160n_delay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

dataArray_cdelay = textscan(fileID_cdelay, formatSpec_20n_cdelay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_40n_cdelay = textscan(fileID_40n_cdelay, formatSpec_40n_cdelay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_80n_cdelay = textscan(fileID_80n_cdelay, formatSpec_80n_cdelay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_160n_cdelay = textscan(fileID_160n_cdelay, formatSpec_160n_cdelay, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');


%% Close the text file.
fclose(fileID_delay);
fclose(fileID_40n_delay);
fclose(fileID_80n_delay);
fclose(fileID_160n_delay);
fclose(fileID_cdelay);
fclose(fileID_40n_cdelay);
fclose(fileID_80n_cdelay);
fclose(fileID_160n_cdelay);
%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
safety_range=[50 100 150 200 250 300 350 400 450 500];

hptx_count = dataArray_delay{:, 1};
lptx_count = dataArray_delay{:, 2};
hp2hp_count = dataArray_delay{:, 3};
hp_count = dataArray_delay{:, 4};
lp_count = dataArray_delay{:, 5};

hptx_count_40n = dataArray_40n_delay{:, 1};
lptx_count_40n = dataArray_40n_delay{:, 2};
hp2hp_count_40n = dataArray_40n_delay{:, 3};
hp_count_40n = dataArray_40n_delay{:, 4};
lp_count_40n = dataArray_40n_delay{:, 5};

hptx_count_80n = dataArray_80n_delay{:, 1};
lptx_count_80n = dataArray_80n_delay{:, 2};
hp2hp_count_80n = dataArray_80n_delay{:, 3};
hp_count_80n = dataArray_80n_delay{:, 4};
lp_count_80n = dataArray_80n_delay{:, 5};

hptx_count_160n = dataArray_160n_delay{:, 1};
lptx_count_160n = dataArray_160n_delay{:, 2};
hp2hp_count_160n = dataArray_160n_delay{:, 3};
hp_count_160n = dataArray_160n_delay{:, 4};
lp_count_160n = dataArray_160n_delay{:, 5};

c_hptx_count = dataArray_cdelay{:, 1};
c_lptx_count = dataArray_cdelay{:, 2};
c_hp2hp_count = dataArray_cdelay{:, 3}
c_hp_count = dataArray_cdelay{:, 4}
c_lp_count = dataArray_cdelay{:, 5}

c_hptx_count_40n = dataArray_40n_cdelay{:, 1};
c_lptx_count_40n = dataArray_40n_cdelay{:, 2};
c_hp2hp_count_40n = dataArray_40n_cdelay{:, 3}
c_hp_count_40n = dataArray_40n_cdelay{:, 4}
c_lp_count_40n = dataArray_40n_cdelay{:, 5}

c_hptx_count_80n = dataArray_80n_cdelay{:, 1};
c_lptx_count_80n = dataArray_80n_cdelay{:, 2};
c_hp2hp_count_80n = dataArray_80n_cdelay{:, 3}
c_hp_count_80n = dataArray_80n_cdelay{:, 4}
c_lp_count_80n = dataArray_80n_cdelay{:, 5}

c_hptx_count_160n = dataArray_160n_cdelay{:, 1};
c_lptx_count_160n = dataArray_160n_cdelay{:, 2};
c_hp2hp_count_160n = dataArray_160n_cdelay{:, 3}
c_hp_count_160n = dataArray_160n_cdelay{:, 4}
c_lp_count_160n = dataArray_160n_cdelay{:, 5}

% display(['20 HP-HP node packet difference: ' num2str((hp2hp_count-c_hp2hp_count))]);
% display(['40 HP-HP node packet difference: ' num2str((hp2hp_count_40n-c_hp2hp_count_40n))]);
% display(['80 HP-HP node packet difference: ' num2str((hp2hp_count_80n-c_hp2hp_count_80n))]);
% display(['160 HP-HP node packet difference: ' num2str((hp2hp_count_160n-c_hp2hp_count_160n))]);
% 
% display(['20 HP-LP node packet difference: ' num2str((hp_count-c_hp_count))]);
% display(['40 HP-LP node packet difference: ' num2str((hp_count_40n-c_hp_count_40n))]);
% display(['80 HP-LP node packet difference: ' num2str((hp_count_80n-c_hp_count_80n))]);
% display(['160 HP-LP node packet difference: ' num2str((hp_count_160n-c_hp_count_160n))]);
% 
% display(['20 LP-LP node packet difference: ' num2str((lp_count-c_lp_count))]);
% display(['40 LP-LP node packet difference: ' num2str((lp_count_40n-c_lp_count_40n))]);
% display(['80 LP-LP node packet difference: ' num2str((lp_count_80n-c_lp_count_80n))]);
% display(['160 LP-LP node packet difference: ' num2str((lp_count_160n-c_lp_count_160n))]);

node_d=60*[20 40 80 160];
hp2hp=[hp2hp_count hp2hp_count_40n hp2hp_count_80n hp2hp_count_160n];
hp=[hp_count hp_count_40n hp_count_80n hp_count_160n];
lp=[lp_count lp_count_40n lp_count_80n lp_count_160n];
hp2hp_control=[c_hp2hp_count c_hp2hp_count_40n c_hp2hp_count_80n c_hp2hp_count_160n];
hp_control=[c_hp_count c_hp_count_40n c_hp_count_80n c_hp_count_160n];
lp_control=[c_lp_count c_lp_count_40n c_lp_count_80n c_lp_count_160n];

hp2hp_diff=hp2hp-hp2hp_control;
hp_diff=hp-hp_control;
lp_diff=lp-lp_control;

hp2hp_sec=hp2hp_diff./node_d;
hp_sec=hp_diff./node_d;
lp_sec=lp_diff./node_d;

display(['20 HP-HP node packet difference: ' num2str((hp2hp_count-c_hp2hp_count)/(20))]);
display(['40 HP-HP node packet difference: ' num2str((hp2hp_count_40n-c_hp2hp_count_40n)/(40))]);
display(['80 HP-HP node packet difference: ' num2str((hp2hp_count_80n-c_hp2hp_count_80n)/(80))]);
display(['160 HP-HP node packet difference: ' num2str((hp2hp_count_160n-c_hp2hp_count_160n)/(160))]);

display(['20 HP-LP node packet difference: ' num2str((hp_count-c_hp_count)/(20))]);
display(['40 HP-LP node packet difference: ' num2str((hp_count_40n-c_hp_count_40n)/(40))]);
display(['80 HP-LP node packet difference: ' num2str((hp_count_80n-c_hp_count_80n)/(80))]);
display(['160 HP-LP node packet difference: ' num2str((hp_count_160n-c_hp_count_160n)/(160))]);

display(['20 LP-LP node packet difference: ' num2str((lp_count-c_lp_count)/(20))]);
display(['40 LP-LP node packet difference: ' num2str((lp_count_40n-c_lp_count_40n)/(40))]);
display(['80 LP-LP node packet difference: ' num2str((lp_count_80n-c_lp_count_80n)/(80))]);
display(['160 LP-LP node packet difference: ' num2str((lp_count_160n-c_lp_count_160n)/(160))]);

figure;plot(node_d,hp2hp, '-or');ylabel('Packets Delivered'); xlabel('Node Density'); title('Packets vs Node Density');
hold on;
plot(node_d,hp, '-ob');%ylabel('Packets'); xlabel('Node Density'); 
plot(node_d,lp, '-ok');%ylabel('Packets'); xlabel('Node Density'); 
%hold off;
%legend('High Priority to High Priority Packets','High Priority to Low Priority Packets','Low Priority to Low Priority Packets')

%figure;
plot(node_d,hp2hp_control, '-.xr');
%ylabel('Packets'); xlabel('Node Density'); 
%hold on;
plot(node_d,hp_control,'-.xb');%ylabel('Packets'); xlabel('Node Density'); 
plot(node_d,lp_control,'-.xk');%ylabel('Packets'); xlabel('Node Density'); 
hold off;
%legend('High Priority to High Priority Packets-Control','High Priority to Low Priority Packets-Control','Low Priority to Low Priority Packets-Control')
legend('High Priority to High Priority Packets-Control','High Priority to Low Priority Packets-Control','Low Priority to Low Priority Packets-Control'...
    ,'High Priority to High Priority Packets-Adaptive Rate','2 class High Priority to Low Priority Packets-Adaptive Rate','2 class Low Priority to Low Priority Packets-Adaptive Rate')

figure;plot(node_d,hp2hp_diff, '-.xr'); ylabel('Difference in Packets Delivered'); xlabel('Node Density'); title('Difference b/w Adaptive and Control Packets vs Node Density');
hold on;
plot(node_d,hp_diff,'-.xb');%ylabel('Packets'); xlabel('Node Density'); 
plot(node_d,lp_diff,'-.xk');%ylabel('Packets'); xlabel('Node Density'); 
hold off;
legend('High Priority to High Priority Packets','High Priority to Low Priority Packets','Low Priority to Low Priority Packets')

figure;plot(node_d,hp2hp_sec, '-.xr'); ylabel('Difference in Packets Delivered'); xlabel('Node Density'); title('Difference b/w Adaptive and Control Packets vs Node Density');
hold on;
plot(node_d,hp_sec,'-.xb');%ylabel('Packets'); xlabel('Node Density'); 
plot(node_d,lp_sec,'-.xk');%ylabel('Packets'); xlabel('Node Density'); 
hold off;
legend('High Priority to High Priority Packets','High Priority to Low Priority Packets','Low Priority to Low Priority Packets')


% display(['20 HP-HP node packet difference: ' num2str((hp2hp_count-c_hp2hp_count)/(10*60*20))]);
% display(['40 HP-HP node packet difference: ' num2str((hp2hp_count_40n-c_hp2hp_count_40n)/(10*60*40))]);
% display(['80 HP-HP node packet difference: ' num2str((hp2hp_count_80n-c_hp2hp_count_80n)/(10*60*80))]);
% display(['160 HP-HP node packet difference: ' num2str((hp2hp_count_160n-c_hp2hp_count_160n)/(10*60*160))]);
% 
% display(['20 HP-LP node packet difference: ' num2str((hp_count-c_hp_count)/(10*60*20))]);
% display(['40 HP-LP node packet difference: ' num2str((hp_count_40n-c_hp_count_40n)/(10*60*40))]);
% display(['80 HP-LP node packet difference: ' num2str((hp_count_80n-c_hp_count_80n)/(10*60*80))]);
% display(['160 HP-LP node packet difference: ' num2str((hp_count_160n-c_hp_count_160n)/(10*60*160))]);
% 
% display(['20 LP-LP node packet difference: ' num2str((lp_count-c_lp_count)/(10*60*20))]);
% display(['40 LP-LP node packet difference: ' num2str((lp_count_40n-c_lp_count_40n)/(10*60*40))]);
% display(['80 LP-LP node packet difference: ' num2str((lp_count_80n-c_lp_count_80n)/(10*60*80))]);
% display(['160 LP-LP node packet difference: ' num2str((lp_count_160n-c_lp_count_160n)/(10*60*160))]);