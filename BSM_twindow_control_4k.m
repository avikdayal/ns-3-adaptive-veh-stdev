%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_20node_5sec.output3.csv_msgStats2.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/05/30 13:05:33
clear all;
close all;
%% Initialize variables.
delimiter = ',';
startRow = 2;
%filename_40n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_40node_5sec.output3.csv_msgStats2.csv';
%filename_80n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_80node_5sec.output3.csv_msgStats2.csv';
%filename_160n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_160node_5sec.output3.csv_msgStats2.csv';
filename_20n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_20node_cv_4k_control.output3.csv_msgStats2.csv';
filename_40n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_40node_cv_4k_control.output3.csv_msgStats2.csv';
%filename_60n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_60node_5sec.output3.csv_msgStats2.csv';
filename_80n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_80node_cv_4k_control.output3.csv_msgStats2.csv';
filename_120n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_120node_cv_4k_control.output3.csv_msgStats2.csv';
filename_160n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_160node_cv_4k_control.output3.csv_msgStats2.csv';
filename_200n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_200node_cv_4k_control.output3.csv_msgStats2.csv';

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
% For more information, see the TEXTSCAN documentation.
%formatSpec = '%f%f%f%f%f%f%f%[^\n\r]';
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';
%% Open the text file.
fileID = fopen(filename_20n,'r');
fileID_40 = fopen(filename_40n,'r');
fileID_80 = fopen(filename_80n,'r');
fileID_120 = fopen(filename_120n,'r');
fileID_160 = fopen(filename_160n,'r');
fileID_200 = fopen(filename_200n,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_40 = textscan(fileID_40, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_80 = textscan(fileID_80, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_120 = textscan(fileID_120, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_160 = textscan(fileID_160, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_200 = textscan(fileID_200, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');



%% Close the text file.
fclose(fileID);
fclose(fileID_40);
fclose(fileID_80);
fclose(fileID_120);
fclose(fileID_160);
fclose(fileID_200);
%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
MsgID = dataArray{:, 1};
TxNode = dataArray{:, 2};
hp2hp_count = dataArray{:, 3};
hp_count = dataArray{:, 4};
lp_count = dataArray{:, 5};
hp2hp_delay_msg = dataArray{:, 6};
hp_delay_msg = dataArray{:, 7};
lp_delay_msg = dataArray{:, 8};

MsgID_40 = dataArray_40{:, 1};
TxNode_40 = dataArray_40{:, 2};
hp2hp_count_40 = dataArray_40{:, 3};
hp_count_40 = dataArray_40{:, 4};
lp_count_40 = dataArray_40{:, 5};
hp2hp_delay_msg_40 = dataArray_40{:, 6};
hp_delay_msg_40 = dataArray_40{:, 7};
lp_delay_msg_40 = dataArray_40{:, 8};

MsgID_80 = dataArray_80{:, 1};
TxNode_80 = dataArray_80{:, 2};
hp2hp_count_80 = dataArray_80{:, 3};
hp_count_80 = dataArray_80{:, 4};
lp_count_80 = dataArray_80{:, 5};
hp2hp_delay_msg_80 = dataArray_80{:, 6};
hp_delay_msg_80 = dataArray_80{:, 7};
lp_delay_msg_80 = dataArray_80{:, 8};

MsgID_120 = dataArray_120{:, 1};
TxNode_120 = dataArray_120{:, 2};
hp2hp_count_120 = dataArray_120{:, 3};
hp_count_120 = dataArray_120{:, 4};
lp_count_120 = dataArray_120{:, 5};
hp2hp_delay_msg_120 = dataArray_120{:, 6};
hp_delay_msg_120 = dataArray_120{:, 7};
lp_delay_msg_120 = dataArray_120{:, 8};

MsgID_160 = dataArray_160{:, 1};
TxNode_160 = dataArray_160{:, 2};
hp2hp_count_160 = dataArray_160{:, 3};
hp_count_160 = dataArray_160{:, 4};
lp_count_160 = dataArray_160{:, 5};
hp2hp_delay_msg_160 = dataArray_160{:, 6};
hp_delay_msg_160 = dataArray_160{:, 7};
lp_delay_msg_160 = dataArray_160{:, 8};

MsgID_200 = dataArray_200{:, 1};
TxNode_200 = dataArray_200{:, 2};
hp2hp_count_200 = dataArray_200{:, 3};
hp_count_200 = dataArray_200{:, 4};
lp_count_200 = dataArray_200{:, 5};
hp2hp_delay_msg_200 = dataArray_200{:, 6};
hp_delay_msg_200 = dataArray_200{:, 7};
lp_delay_msg_200 = dataArray_200{:, 8};

% hp2hp_delay_msg_40 = dataArray_40{:, 5};
% hp_delay_msg_40 = dataArray_40{:, 6};
% lp_delay_msg_40 = dataArray_40{:, 7};
% 
% hp2hp_delay_msg_80 = dataArray_80{:, 5};
% hp_delay_msg_80 = dataArray_80{:, 6};
% lp_delay_msg_80 = dataArray_80{:, 7};
% 
% hp2hp_delay_msg_160 = dataArray_160{:, 5};
% hp_delay_msg_160 = dataArray_160{:, 6};
% lp_delay_msg_160 = dataArray_160{:, 7};
% 
hp_ind=find(lp_delay_msg==-1);
lp_ind=find(hp_delay_msg==-1);
HP_veh=(TxNode(hp_ind));
LP_veh=(TxNode(lp_ind));
hp2hp_delay_msg(find(hp_delay_msg==-1))=[];
hp_delay_msg(find(hp_delay_msg==-1))=[];
lp_delay_msg(find(lp_delay_msg==-1))=[];

hp_ind_40=find(lp_delay_msg_40==-1);
lp_ind_40=find(hp_delay_msg_40==-1);
HP_veh_40=(TxNode_40(hp_ind_40));
LP_veh_40=(TxNode_40(lp_ind_40));
hp2hp_delay_msg_40(find(hp_delay_msg_40==-1))=[];
hp_delay_msg_40(find(hp_delay_msg_40==-1))=[];
lp_delay_msg_40(find(lp_delay_msg_40==-1))=[];

hp_ind_80=find(lp_delay_msg_80==-1);
lp_ind_80=find(hp_delay_msg_80==-1);
HP_veh_80=(TxNode_80(hp_ind_80));
LP_veh_80=(TxNode_80(lp_ind_80));
hp2hp_delay_msg_80(find(hp_delay_msg_80==-1))=[];
hp_delay_msg_80(find(hp_delay_msg_80==-1))=[];
lp_delay_msg_80(find(lp_delay_msg_80==-1))=[];

hp_ind_120=find(lp_delay_msg_120==-1);
lp_ind_120=find(hp_delay_msg_120==-1);
HP_veh_120=(TxNode_120(hp_ind_120));
LP_veh_120=(TxNode_120(lp_ind_120));
hp2hp_delay_msg_120(find(hp_delay_msg_120==-1))=[];
hp_delay_msg_120(find(hp_delay_msg_120==-1))=[];
lp_delay_msg_120(find(lp_delay_msg_120==-1))=[];

hp_ind_160=find(lp_delay_msg_160==-1);
lp_ind_160=find(hp_delay_msg_160==-1);
HP_veh_160=(TxNode_160(hp_ind_120));
LP_veh_160=(TxNode_160(lp_ind_120));
hp2hp_delay_msg_160(find(hp_delay_msg_160==-1))=[];
hp_delay_msg_160(find(hp_delay_msg_160==-1))=[];
lp_delay_msg_160(find(lp_delay_msg_160==-1))=[];

hp_ind_200=find(lp_delay_msg_200==-1);
lp_ind_200=find(hp_delay_msg_200==-1);
HP_veh_200=(TxNode_200(hp_ind_200));
LP_veh_200=(TxNode_200(lp_ind_200));
hp2hp_delay_msg_200(find(hp_delay_msg_200==-1))=[];
hp_delay_msg_200(find(hp_delay_msg_200==-1))=[];
lp_delay_msg_200(find(lp_delay_msg_200==-1))=[];

node_d=[20 40 80 120 160 200];
hp2hp_sec=[mean(hp2hp_delay_msg) mean(hp2hp_delay_msg_40) mean(hp2hp_delay_msg_80) mean(hp2hp_delay_msg_120) mean(hp2hp_delay_msg_160) mean(hp2hp_delay_msg_200)];
hp_sec=[mean(hp_delay_msg) mean(hp_delay_msg_40) mean(hp_delay_msg_80) mean(hp_delay_msg_120) mean(hp_delay_msg_160) mean(hp_delay_msg_200)];
lp_sec=[mean(lp_delay_msg) mean(lp_delay_msg_40) mean(lp_delay_msg_80) mean(lp_delay_msg_120) mean(lp_delay_msg_160) mean(lp_delay_msg_200)];

figure('rend','painters','pos',[10 10 700 500]);
plot(node_d,hp2hp_sec, '-.xr'); ylabel('Average delay (ms)'); xlabel('Node Density'); title('Difference b/w Adaptive and Control Packets vs Node Density');
hold on;
plot(node_d,hp_sec,'-.xb');%ylabel('Packets'); xlabel('Node Density'); 
plot(node_d,lp_sec,'-.xk');%ylabel('Packets'); xlabel('Node Density'); 
hold off;
legend('High Priority to High Priority Packets','High Priority to Low Priority Packets','Low Priority to Low Priority Packets')
display(['number of hp2hpmessages: ' length(hp2hp_delay_msg)] );
display(['number of hpmessages: ' length(hp_delay_msg)] );
display(['number of lpmessages: ' length(lp_delay_msg)] );
%% Clear temporary variables
%clearvars filename delimiter startRow formatSpec fileID dataArray ans;





%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/bsm_10node.output2.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/05/01 12:59:04
%clear all;
%close all;
%% Initialize variables.
filename_20n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_20node_cv_4k_control.output2.csv';
filename_40n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_40node_cv_4k_control.output2.csv';
filename_60n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_60node_cv_4k_control.output2.csv';
filename_80n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_80node_cv_4k_control.output2.csv';
filename_120n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_120node_cv_4k_control.output2.csv';
filename_160n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_160node_cv_4k_control.output2.csv';
filename_200n = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-beacon-rate/ns-3-dev/bsm_200node_cv_4k_control.output2.csv';

delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec_40n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec_80n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec_120n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec_160n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
formatSpec_200n = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f';
%% Open the text file.
fileID = fopen(filename_20n,'r');
fileID_40n = fopen(filename_40n,'r');
fileID_80n = fopen(filename_80n,'r');
fileID_120n = fopen(filename_120n,'r');
fileID_160n = fopen(filename_160n,'r');
fileID_200n = fopen(filename_200n,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_40n = textscan(fileID_40n, formatSpec_40n, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_80n = textscan(fileID_80n, formatSpec_80n, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_120n = textscan(fileID_120n, formatSpec_160n, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_160n = textscan(fileID_160n, formatSpec_160n, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray_200n = textscan(fileID_200n, formatSpec_200n, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');


%% Close the text file.
fclose(fileID);
fclose(fileID_40n);
fclose(fileID_80n);
fclose(fileID_120n);
fclose(fileID_160n);
fclose(fileID_200n);
%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
safety_range=[50 100 150 200 250 300 350 400 450 500];

BSM_PDR1 = dataArray{:, 1};
BSM_PDR2 = dataArray{:, 2};
BSM_PDR3 = dataArray{:, 3};
BSM_PDR4 = dataArray{:, 4};
BSM_PDR5 = dataArray{:, 5};
BSM_PDR6 = dataArray{:, 6};
BSM_PDR7 = dataArray{:, 7};
BSM_PDR8 = dataArray{:, 8};
BSM_PDR9 = dataArray{:, 9};
BSM_PDR10 = dataArray{:, 10};
HPBSM_PDR1 = dataArray{:, 11};
HPBSM_PDR2 = dataArray{:, 12};
HPBSM_PDR3 = dataArray{:, 13};
HPBSM_PDR4 = dataArray{:, 14};
HPBSM_PDR5 = dataArray{:, 15};
HPBSM_PDR6 = dataArray{:, 16};
HPBSM_PDR7 = dataArray{:, 17};
HPBSM_PDR8 = dataArray{:, 18};
HPBSM_PDR9 = dataArray{:, 19};
HPBSM_PDR10 = dataArray{:, 20};
AverageRoutingGoodputKbps = dataArray{:, 21};
MacPhyOverheadTotalTxbytesTotalTxHPbytes = dataArray{:, 22};
VarName23 = dataArray{:, 23};
VarName24 = dataArray{:, 24};
output=cell2mat(dataArray);
output_40n=cell2mat(dataArray_40n);
output_80n=cell2mat(dataArray_80n);
output_120n=cell2mat(dataArray_120n);
output_160n=cell2mat(dataArray_160n);
output_200n=cell2mat(dataArray_200n);
lp_PDR=output(1:10);
hp_PDR=output(11:20);
lp_PDR_40n=output_40n(1:10);
hp_PDR_40n=output_40n(11:20);
lp_PDR_80n=output_80n(1:10);
hp_PDR_80n=output_80n(11:20);
lp_PDR_120n=output_120n(1:10);
hp_PDR_120n=output_120n(11:20);
lp_PDR_160n=output_160n(1:10);
hp_PDR_160n=output_160n(11:20);
lp_PDR_200n=output_200n(1:10);
hp_PDR_200n=output_200n(11:20);

lp_T=3000;
hp_T=300;
lp_delay_msg=110;
hp_delay_msg=110;
twin_20_lp=1-(1-lp_PDR(1:7)).^(lp_T./mean(lp_delay_msg));
twin_40_lp=1-(1-lp_PDR_40n(1:7)).^(lp_T./mean(lp_delay_msg));
twin_80_lp=1-(1-lp_PDR_80n(1:7)).^(lp_T./mean(lp_delay_msg));
twin_120_lp=1-(1-lp_PDR_120n(1:7)).^(lp_T./mean(lp_delay_msg));
twin_160_lp=1-(1-lp_PDR_160n(1:7)).^(lp_T./mean(lp_delay_msg));
twin_200_lp=1-(1-lp_PDR_200n(1:7)).^(lp_T./mean(lp_delay_msg));

twin_20_hp=1-(1-hp_PDR(1:7)).^(hp_T./mean(hp_delay_msg));
twin_40_hp=1-(1-hp_PDR_40n(1:7)).^(hp_T./mean(hp_delay_msg));
twin_80_hp=1-(1-hp_PDR_80n(1:7)).^(hp_T./mean(hp_delay_msg));
twin_120_hp=1-(1-hp_PDR_120n(1:7)).^(hp_T./mean(hp_delay_msg));
twin_160_hp=1-(1-hp_PDR_160n(1:7)).^(hp_T./mean(hp_delay_msg));
twin_200_hp=1-(1-hp_PDR_200n(1:7)).^(hp_T./mean(hp_delay_msg));
twin_hp=[twin_20_hp twin_40_hp twin_80_hp twin_120_hp twin_160_hp twin_200_hp];
figure;plot(twin_80_hp);

figure('rend','painters','pos',[10 10 700 500]);plot(safety_range(1:7), twin_20_lp,'-or');title('T-window Control Probability vs Distance');xlabel('Distance (m)');ylabel('T-Window Probability');
hold on;
plot(safety_range(1:7), twin_40_lp,'-ob');
plot(safety_range(1:7), twin_80_lp,'-ok');
plot(safety_range(1:7), twin_120_lp,'-oy');
plot(safety_range(1:7), twin_160_lp,'-og');
plot(safety_range(1:7), twin_200_lp,'-om');
plot(safety_range(1:7), twin_20_hp,'-.xr');
plot(safety_range(1:7), twin_40_hp,'-.xb');
plot(safety_range(1:7), twin_80_hp,'-.xk');
plot(safety_range(1:7), twin_120_hp,'-.xy');
plot(safety_range(1:7), twin_160_hp,'-.xg');
plot(safety_range(1:7), twin_200_hp,'-.xm');
ylim([0.7 1.01]);
legend('20 nodes-Risk Scheme-Safe Nodes','40 nodes-Risk Scheme-Safe Nodes','80 nodes--Risk Scheme-Safe Nodes',...
    '120 nodes--Risk Scheme-Safe Nodes','160 nodes--Risk Scheme-Safe Nodes','200 nodes--Risk Scheme-Safe Nodes',...
    '20 nodes-Risk Scheme-At Risk Nodes','40 nodes-Risk Scheme-At Risk Nodes','80 nodes-Risk Scheme-At Risk Nodes',...
    '120 nodes-Risk Scheme-At Risk Nodes','160 nodes-Risk Scheme-At Risk Nodes','200 nodes--Risk Scheme-At Risk Nodes');
% twin_40=
% twin_80=
% twin_120=
% twin_160=
% twin_200=