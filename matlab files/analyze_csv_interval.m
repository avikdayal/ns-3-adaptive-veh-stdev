%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/walk0_rcv.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/09 21:45:53
clear all;
close all;
%% Initialize variables.
filename_rx = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/walkhp_rcv.csv';
delimiter_rx = ',';
startRow_rx = 2;

filename = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/walkhp_xmit.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: text (%s)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec_rx = '%f%f%s%f%f%f%[^\n\r]';
formatSpec = '%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';
%% Open the text file.
fileID_rx = fopen(filename_rx,'r');
fileID = fopen(filename,'r');
%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray_rx = textscan(fileID_rx, formatSpec_rx, 'Delimiter', delimiter_rx, 'EmptyValue' ,NaN,'HeaderLines' ,startRow_rx-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN,'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID_rx);
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
MsgId_rx = dataArray_rx{:, 1};
Tmills_rx = dataArray_rx{:, 2};
rcv_mode_rx = dataArray_rx{:, 3};
NodeId_rx = dataArray_rx{:, 4};
EmitterNodeId_rx = dataArray_rx{:, 5};
node_speed_rx = dataArray_rx{:, 6};

MsgId = dataArray{:, 1};
Tmills = dataArray{:, 2};
NodeId = dataArray{:, 3};
priority1 = dataArray{:, 4};
node_speed = dataArray{:, 5};
dist_from = dataArray{:, 6};
count1 = dataArray{:, 7};
distsq_0 = dataArray{:, 8};
distsq_1 = dataArray{:, 9};
distsq_2 = dataArray{:, 10};
distsq_3 = dataArray{:, 11};
distsq_4 = dataArray{:, 12};
distsq_5 = dataArray{:, 13};
distsq_6 = dataArray{:, 14};
distsq_7 = dataArray{:, 15};
distsq_8 = dataArray{:, 16};
distsq_9 = dataArray{:, 17};

offset=550000;
ind_b=1:offset;
ind_e=(length(MsgId)-offset+1):length(MsgId);

pdr=zeros(1,length(MsgId));
pdr_priority=zeros(1,length(MsgId));

for i=offset:(max(MsgId)-offset)
    pdr(i)=length(find(MsgId_rx==i))/count1(i);
    if(isnan(pdr(i)))
        if(((count1(i)==0) && (length(find(MsgId_rx==i)))))
            pdr(i)=1;
        else
            pdr(i)=0;
        end
        
    end
    
    if(pdr(i)>1)
        pdr(i)=1;
    end
    pdr_priority(i)=priority1(i);
end
pdr([ind_b ind_e])=[];
pdr_priority([ind_b ind_e])=[];
priority_levels = unique(priority1);
avg_pdr_by_priority=[];
for j=1:length(priority_levels)
    avg_pdr_by_priority=[avg_pdr_by_priority mean(pdr(find(pdr_priority==priority_levels(j))))];
end 
%% Clear temporary variables
clearvars filename_rx delimiter_rx startRow_rx formatSpec_rx fileID_rx dataArray_rx ans;
clearvars filename delimiter startRow formatSpec fileID dataArray ans;