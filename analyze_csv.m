%% Import data from text file.
% Script for importing data from the following text file:
%
%    /Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/walk0.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2018/04/02 17:06:19

%% Initialize variables.
clear all;
close all;
filename = '/Users/avikdayal/Google-Drive/PHD-Thesis/ARL-work/ns-3-RA-simulation/ns-3-dev/walk0.csv';
delimiter = ',';

%% Format for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
%   column11: double (%f)
%	column12: double (%f)
%   column13: double (%f)
%	column14: double (%f)
%   column15: double (%f)
%	column16: double (%f)
%   column17: double (%f)
%	column18: double (%f)
%   column19: double (%f)
%	column20: double (%f)
%   column21: double (%f)
%	column22: double (%f)
%   column23: double (%f)
%	column24: double (%f)
%   column25: double (%f)
%	column26: double (%f)
%   column27: double (%f)
%	column28: double (%f)
%   column29: double (%f)
%	column30: double (%f)
%   column31: double (%f)
%	column32: double (%f)
%   column33: double (%f)
%	column34: double (%f)
%   column35: double (%f)
%	column36: double (%f)
%   column37: double (%f)
%	column38: double (%f)
%   column39: double (%f)
%	column40: double (%f)
%   column41: double (%f)
%	column42: double (%f)
%   column43: double (%f)
%	column44: double (%f)
%   column45: double (%f)
%	column46: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'EmptyValue' ,NaN, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
time_ms = dataArray{:, 1};
S = dataArray{:, 2};
node_num = dataArray{:, 3};
packet_id = dataArray{:, 4};
priority = dataArray{:, 5};
num_p_sent = dataArray{:, 7};
%VarName7 = dataArray{:, 7};
velocity = dataArray{:, 6};
VarName8 = dataArray{:, 8};
VarName9 = dataArray{:, 9};
VarName10 = dataArray{:, 10};
VarName11 = dataArray{:, 11};
VarName12 = dataArray{:, 12};
VarName13 = dataArray{:, 13};
VarName14 = dataArray{:, 14};
VarName15 = dataArray{:, 15};
VarName16 = dataArray{:, 16};
VarName17 = dataArray{:, 17};
VarName18 = dataArray{:, 18};
VarName19 = dataArray{:, 19};
VarName20 = dataArray{:, 20};
VarName21 = dataArray{:, 21};
VarName22 = dataArray{:, 22};
VarName23 = dataArray{:, 23};
VarName24 = dataArray{:, 24};
VarName25 = dataArray{:, 25};
VarName26 = dataArray{:, 26};
VarName27 = dataArray{:, 27};
VarName28 = dataArray{:, 28};
VarName29 = dataArray{:, 29};
VarName30 = dataArray{:, 30};
VarName31 = dataArray{:, 31};
VarName32 = dataArray{:, 32};
VarName33 = dataArray{:, 33};
VarName34 = dataArray{:, 34};
VarName35 = dataArray{:, 35};
VarName36 = dataArray{:, 36};
VarName37 = dataArray{:, 37};
VarName38 = dataArray{:, 38};
VarName39 = dataArray{:, 39};
VarName40 = dataArray{:, 40};
VarName41 = dataArray{:, 41};
VarName42 = dataArray{:, 42};
VarName43 = dataArray{:, 43};
VarName44 = dataArray{:, 44};
VarName45 = dataArray{:, 45};
VarName46 = dataArray{:, 46};

pdr_stats_nodes_sent=zeros(1,max(packet_id));
pdr_stats_nodes_rec=zeros(1,max(packet_id));

pdr_stats_nodes_sent_hp=zeros(1,max(packet_id));
pdr_stats_nodes_rec_hp=zeros(1,max(packet_id));

priority_tracker=zeros(1,max(packet_id));
packet_id_tracker=1;
for i=1:length(time_ms)
    
    if( strcmp(S(i),'S'))
        pdr_stats_nodes_sent(packet_id(i))=num_p_sent(i);
        priority_tracker(packet_id(i))=priority(i);
    end
    if(strcmp(S(i),'R'))
        pdr_stats_nodes_rec(packet_id(i))=pdr_stats_nodes_rec(packet_id(i))+1;
        
    end
    
end
pdr_stats_nodes=pdr_stats_nodes_rec./pdr_stats_nodes_sent;
%packets_to_remove=[1 2 length(pdr_stats_nodes)];
packets_to_remove=[];
pdr_stats_nodes(packets_to_remove)=[];
priority_tracker(packets_to_remove)=[];
avg_pdr_by_priority=[];
priority_levels = unique(priority);
priority_levels(isnan(priority_levels)) = [];
velocity(isnan(velocity))=[];
velocity(packets_to_remove)=[];
for j=1:length(priority_levels)
    avg_pdr_by_priority=[avg_pdr_by_priority mean(pdr_stats_nodes(find(priority_tracker==priority_levels(j))))];
end   
%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans;